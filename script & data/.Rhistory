rstd_chol = rstandard(mlr_chol1)  # standardized residuals
pstd_chol = scale(predict(mlr_chol1))  # standardized predicted values
plot(rstd_chol ~ pstd_chol, xlab = "Std predicted", ylab = "Std residuals")
abline(0, 0)  # normal, linear, equal variance
plot(rstd_chol ~ pstd_chol, xlab = "Std predicted", ylab = "Std residuals")
abline(0, 0)  # normal, linear, equal variance
plot(rraw_chol ~ coronary$dbp, xlab = "DBP", ylab = "Raw Residuals")
abline(0, 0)
# present the results and interpret
summary(mlr_chol_final)
Confint(mlr_chol_final)  # 95% CI of the coefficients
rsq(mlr_chol_final, adj = T)
# rename the selected model
mlr_chol_final = mlr_chol1
# present the results and interpret
summary(mlr_chol_final)
Confint(mlr_chol_final)  # 95% CI of the coefficients
rsq(mlr_chol_final, adj = T)
# predict
coronary$pred_chol = predict(mlr_chol_final)
head(coronary)
list(dbp = 90, race = "indian")
# simple, dbp = 90, race = indian
predict(mlr_chol_final, list(dbp = 90, race = "indian"))
# more data points
new_data = data.frame(dbp = c(90, 90, 90), race = c("malay", "chinese", "indian"))
new_data
predict(mlr_chol_final, new_data)
predict(mlr_chol_final, new_data)
new_data$pred_chol = predict(mlr_chol_final, new_data)
new_data
# 02-logistic
# library
library(foreign)
library(epiDisplay)
library(psych)
library(lattice)
library(rsq)
library(MASS)
library(car)
# data
coronary = read.dta("coronary.dta")
str(coronary)
# slogr, cad ~ gender
codebook(coronary[c("cad", "gender")])
table(coronary$gender, coronary$cad)
cc(coronary$cad, coronary$gender)  # plain OR
slg_cad = glm(cad ~ gender, data = coronary, family = binomial)
summary(slg_cad)
Confint(slg_cad)  # coeff.
Confint(slg_cad)  # coeff.
?Confint
# library
library(foreign)
library(epiDisplay)
library(psych)
library(lattice)
library(rsq)
library(MASS)
library(car)
# data
coronary = read.dta("coronary.dta")
str(coronary)
?knitr::purl
?knitr::purl("01-linear.Rmd", documentation = 0)
setwd("~/Documents/Office/Lectures/Others/R Workshop PPSP/GLM")
?knitr::purl("01-linear.Rmd", documentation = 0)
?knitr::purl(01-linear.Rmd, documentation = 0)
knitr::purl("01-linear.Rmd", documentation = 0)
# library
library(foreign)
library(lattice)
library(rsq)
library(MASS)
library(car)
library(epiDisplay)
library(psych)
# data
coronary = read.dta("coronary.dta")
str(coronary)
# library
library(foreign)
library(lattice)
library(rsq)
library(MASS)
library(car)
library(epiDisplay)
library(psych)
# data ====
coronary = read.dta("coronary.dta")
str(coronary)
knitr::purl("01-linear.Rmd", documentation = 1)
knitr::purl("01-linear.Rmd", documentation = 1)
# library ====
library(foreign)
library(epiDisplay)
library(psych)
library(lattice)
library(rsq)
library(MASS)
library(car)
# data ====
coronary = read.dta("coronary.dta")
str(coronary)
# explore
summary(coronary[c("chol", "dbp")])
multi.hist(coronary[c("chol", "dbp")])
par(mfrow = c(1, 2))
mapply(boxplot, coronary[c("chol", "dbp")],
main = colnames(coronary[c("chol", "dbp")]))
par(mfrow = c(1, 1))
str(coronary)
setwd("~/Documents/Office/Lectures/Others/R Workshop PPSP/GLM/script")
## explore ----
# descriptive
coronary %>% select(-id, -cad, -race, -gender) %>% describeBy(., coronary$cad)  # numerical
# About ====
#' title: "Statistical Analysis Using RStudio"
#' subtitle: "Logistic Regression"
#' author: "Wan Nor Arifin"
# Library ====
# official CRAN
library(foreign)
library(tidyverse)
library(gtsummary)
library(ggplot2)
library(ggpubr)
library(GGally)
library(psych)
library(rsq)
library(broom)
# custom function
# desc_cat()
source("https://raw.githubusercontent.com/wnarifin/medicalstats-in-R/master/functions/desc_cat_fun.R")
# Data ====
coronary = read.dta("coronary.dta")
str(coronary)
## descriptive ----
coronary %>% select(-id) %>%
tbl_summary(by = cad,
statistic = all_continuous() ~ "{mean} ({sd})",
digits = all_continuous() ~ 1)
# SLogR ====
# example: cad ~ gender
## explore ----
# descriptive
coronary %>% select(gender, cad) %>% desc_cat()
with(coronary, table(gender, cad)) %>% print() %>%
prop.table(margin = 2) * 100
## fit slogr ----
slg_cad = glm(cad ~ gender, data = coronary, family = binomial)
summary(slg_cad)
tidy(slg_cad, conf.int = TRUE, exponentiate = TRUE)  # OR
# MLogR ====
# cad ~ many factors
names(coronary)  # recall what we have
## explore ----
# descriptive
coronary %>% select(-id, -cad, -race, -gender) %>% describeBy(., coronary$cad)  # numerical
coronary %>% select(race, gender) %>% by(., coronary$cad, desc_cat)  # categorical
## descriptive ----
coronary %>% select(-id) %>%
tbl_summary(by = cad,
statistic = all_continuous() ~ "{mean} ({sd})",
digits = all_continuous() ~ 1)
## explore ----
# descriptive
coronary %>% select(-id, -cad, -race, -gender) %>% describeBy(., coronary$cad)  # numerical
coronary %>% select(race, gender) %>% by(., coronary$cad, desc_cat)  # categorical
coronary %>% select(-id, -cad) %>% by(., coronary$cad, plot)  # or using built-in graphics
coronary %>% select(-id, -cad) %>% by(., coronary$cad, ggpairs)  # or using built-in graphics
# or just use tbl_summary()
# plots
coronary %>% select(-id) %>% group_by(cad) %>% ggpairs()
# or just use tbl_summary()
# plots
coronary %>% select(-id, -cad) %>% by(., coronary$cad, ggpairs)  # or using built-in graphics
## fit univariable / slogr ----
# again, you can do one-by-one univariable on your own
slg_cad0 = glm(cad ~ 1, data = coronary, family = binomial)
summary(slg_cad0)
names(coronary)
## fit univariable / slogr ----
# again, you can do one-by-one univariable on your own
slg_cad0 = glm(cad ~ 1, data = coronary, family = binomial)
summary(slg_cad0)
add1(slg_cad0, scope = ~ sbp + dbp + chol + age + bmi + race + gender, test = "LRT")
## fit multivariable / mlogr ----
# race not included, p-value > 0.25
# sbp not included, redundant
mlg_cad = glm(cad ~ sbp + dbp + chol + age + bmi + gender,
data = coronary, family = binomial)
summary(mlg_cad)
## fit multivariable / mlogr ----
# race not included, p-value > 0.25
# sbp not included, redundant
mlg_cad = glm(cad ~ dbp + chol + age + bmi + gender,
data = coronary, family = binomial)
summary(mlg_cad)
# stepwise
# both
mlg_cad_stepboth = step(mlg_cad, direction = "both")
summary(mlg_cad_stepboth)  # cad ~ dbp + gender
# forward
mlg_cad_stepforward = step(slg_cad0,
scope = ~ sbp + dbp + chol + age + bmi + gender,
direction = "forward")
summary(mlg_cad_stepforward)  # cad ~ sbp + gender
# forward
mlg_cad_stepforward = step(slg_cad0,
scope = ~ dbp + chol + age + bmi + gender,
direction = "forward")
summary(mlg_cad_stepforward)  # cad ~ sbp + gender
summary(mlg_cad_stepforward)  # cad ~ dbp + gender
# backward
mlg_cad_stepback = step(mlg_cad, direction = "backward")
summary(mlg_cad_stepback)  # cad ~ dbp + gender
# compare AICs
AIC(mlg_cad_stepboth, mlg_cad_stepforward)
# mlg_cad1: cad ~ dbp + gender
mlg_cad_sel = glm(cad ~ dbp + gender, data = coronary, family = binomial)
tidy(mlg_cad_sel, conf.int = TRUE)
tbl_regression(mlg_cad_sel)
rsq(mlg_cad_sel)
# multicollinearity, MC
# by looking at the estimates and standard errors, SEs
# when SE > Estimate -- MC problem
# How large? Relatively large... not specific in book.
# Sometimes, the estimates are unusually large, i.e. large ORs
# illogical -- also indicates MC problem
summary(mlg_cad_sel)  # all SEs < Estimates/Coefficients
# Now we have a relook at sbp problem above
# mlg_cad1 + sbp : cad ~ dbp + gender + sbp
summary(update(mlg_cad_sel, . ~ . + sbp))
# interaction, *
summary(glm(cad ~ dbp*gender, data = coronary, family = binomial))
source("~/Documents/Office/Lectures/Others/R Workshop PPSP/GLM/script/02-logistic.R", echo=TRUE)
# model fit
# 1. Hosmer-Lemeshow test
# install.packages("ResourceSelection")
library(ResourceSelection)
hl_cad = hoslem.test(mlg_cad_sel$y, mlg_cad_sel$fitted.values)
hl_cad  # does not fit, slightly... ideally > 0.05
# usually because small number of variables in the model
cbind(hl_cad_sel$observed, hl_cad_sel$expected)
# usually because small number of variables in the model
cbind(hl_cad_sel$observed, hl_cad_sel$expected)
# usually because small number of variables in the model
cbind(hl_cad$observed, hl_cad$expected)
# 2. classification table
coronary$cad_prob = mlg_cad_sel$fitted.values
# 2. classification table
coronary$cad_prob = mlg_cad_sel$fitted.values  # save predicted probabilities
mlg_cad_sel$fitted.values
head(coronary[c("cad", "cad_prob")])
coronary %>% select(cad, cad_prob) %>% head()
coronary$cad_pred = cut(coronary$cad_prob, breaks = c(-Inf, 0.5, Inf),
labels = c("no cad", "cad"))
cbind(coronary$cad_prob, coronary$cad_pred)
?cut
abc = 1:10
cut(abc, breaks = c(-Inf, 5, Inf), labels = c("less", "more"))
abc = 0.1:1
abc
abc = 1:10
abc = abc/10
abc
cut(abc, breaks = c(-Inf, 0.5, Inf), labels = c("less", "more"))
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, "cad", "no cad")
coronary$cad_pred
str(coronary)
coronary$cad_pred = as.factor(ifelse(coronary$cad_prob > 0.5, "cad", "no cad"))
str(coronary)
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, "cad", "no cad") %>% as.factor()
head(coronary[c("cad", "cad_prob", "cad_pred")])
table(coronary$cad, coronary$cad_pred)
coronary$cad_pred = cut(coronary$cad_prob, breaks = c(-Inf, 0.5, Inf),
labels = c("no cad", "cad"))
head(coronary[c("cad", "cad_prob", "cad_pred")])
table(coronary$cad, coronary$cad_pred)
coronary %>% select(cad, cad_prob, cad_pred) %>% head()
coronary %>% select(cad, cad_prob, cad_pred) %>% sample()
coronary %>% select(cad, cad_prob, cad_pred) %>% sample(10)
?sample
coronary %>% select(cad, cad_prob, cad_pred) %>% sample(., 10)
coronary %>% select(cad, cad_prob, cad_pred)
coronary %>% select(cad, cad_prob, cad_pred) %>% head()
coronary$cad_pred = ifelse(coronary$cad_prob <= 0.5, "no cad", "cad") %>% as.factor()
coronary %>% select(cad, cad_prob, cad_pred) %>% head()
table(coronary$cad, coronary$cad_pred)
coronary$cad_pred = cut(coronary$cad_prob, breaks = c(-Inf, 0.5, Inf),
labels = c("no cad", "cad"))
coronary %>% select(cad, cad_prob, cad_pred) %>% head()
table(coronary$cad, coronary$cad_pred)
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, "cad", "no cad")
table(coronary$cad, coronary$cad_pred)
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, "cad", "no cad")
coronary %>% select(cad, cad_prob, cad_pred) %>% head()
table(coronary$cad, coronary$cad_pred)
?iflese
?ifelse
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, 1, 0) %>% as.factor()
table(coronary$cad, coronary$cad_pred)
?factor
?recode
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, 1, 0) %>% recode(1 = "cad", 0 = "no cad")
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, 1, 0) %>% recode(.x, 1 = "cad", 0 = "no cad")
ifelse(coronary$cad_prob > 0.5, 1, 0) %>% recode(.x, 1 = "cad", 0 = "no cad")
?recode
?factor
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, 1, 0) %>% factor(1 = "cad", 0 = "no cad")
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, 1, 0) %>% recode_factor(.x, 1="cad", 0="no cad")
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, 1, 0) %>% recode_factor(.x, "1"="cad", "0"="no cad")
ifelse(coronary$cad_prob > 0.5, 1, 0)
ifelse(coronary$cad_prob > 0.5, 1, 0) %>% recode(., "1"="cad", "0"="no cad")
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, 1, 0) %>% recode("1"="cad", "0"="no cad")
coronary$cad_pred
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, 1, 0) %>% recode("1"="cad", "0"="no cad")
coronary %>% select(cad, cad_prob, cad_pred) %>% head()
table(coronary$cad, coronary$cad_pred)
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, 1, 0) %>% recode("0"="no cad", "1"="cad")
table(coronary$cad, coronary$cad_pred)
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, 1, 0)
table(coronary$cad, coronary$cad_pred)
coronary$cad_pred = ifelse(coronary$cad_prob <= 0.5, "no cad", "cad") %>% as.factor()
table(coronary$cad, coronary$cad_pred)
coronary$cad_pred = ifelse(coronary$cad_prob > 0.5, "cad", "no cad") %>% as.factor()
coronary %>% select(cad, cad_prob, cad_pred) %>% head()
(coronary$cad_prob == coronary$cad_pred)
coronary$cad_prob
(coronary$cad == coronary$cad_pred)
# correctly classified %
100 * sum(coronary$cad == coronary$cad_pred) / length(coronary$cad)  # = 80%
# 3. Receiver Operating Characteristic (ROC) curve
roc_cad = lroc(mlg_cad_sel)
??lroc
# 3. Receiver Operating Characteristic (ROC) curve
roc_cad = epiDisplay::lroc(mlg_cad_sel)
roc_cad$auc
# 3. Receiver Operating Characteristic (ROC) curve
roc_cad = epiDisplay::lroc(mlg_cad_sel)
roc_cad$auc
# rename the selected model to final model
mlg_cad_final = mlg_cad_sel
tib_mlg = tidy(mlg_cad_final, conf.int = TRUE)
# use kable to come up with nice table
knitr::kable(tib_mlg, format = "simple")
tib_mlg = tidy(mlg_cad_final, conf.int = TRUE, exponentiate = TRUE)
# use kable to come up with nice table
knitr::kable(tib_mlg, format = "simple")
tbl_regression(mlg_cad_final)
tbl_regression(mlr_chol_final)
# About ====
#' title: "Statistical Analysis Using RStudio"
#' subtitle: "Linear Regression"
#' author: "Wan Nor Arifin"
# Library ====
# official CRAN
library(foreign)
library(tidyverse)
library(gtsummary)
library(ggplot2)
library(ggpubr)
library(GGally)
library(psych)
library(rsq)
library(broom)
# custom function
# desc_cat()
source("https://raw.githubusercontent.com/wnarifin/medicalstats-in-R/master/functions/desc_cat_fun.R")
# Data ====
coronary = read.dta("coronary.dta")
str(coronary)
## descriptive ----
tbl_summary(coronary)  # median IQR
coronary %>% select(-id) %>%
tbl_summary(statistic = all_continuous() ~ "{mean} ({sd})",
digits = all_continuous() ~ 1)
# customization: http://www.danieldsjoberg.com/gtsummary/index.html
# or a different lecture...
# SLR ====
# example: chol ~ dbp
## explore ----
# descriptive
coronary %>% select(chol, dbp) %>% describe()
# plots
hist_chol = ggplot(coronary, aes(chol)) + geom_histogram(color = "blue", fill = "white")
hist_dbp = ggplot(coronary, aes(dbp)) + geom_histogram(color = "red", fill = "white")
bplot_chol = ggplot(coronary, aes(chol)) + geom_boxplot(color = "blue", )
bplot_dbp = ggplot(coronary, aes(dbp)) + geom_boxplot(color = "red")
ggarrange(hist_chol, bplot_chol, hist_dbp, bplot_dbp)
## fit slr ----
# plot
plot_slr = ggplot(coronary, aes(x = dbp, y = chol)) + geom_point() + geom_smooth(method = lm)
plot_slr
# plot(chol ~ dbp, data = coronary)
# abline(slr_chol)  # or using built-in graphics
# fit glm, chol ~ dbp
slr_chol = glm(chol ~ dbp, data = coronary)
summary(slr_chol)
tidy(slr_chol, conf.int = TRUE)  # broom package
rsq(slr_chol, adj = T)  # adjusted R2 - penalized for number of predictor p
# MLR ====
# chol ~ many factors
names(coronary)  # recall what we have
## explore ----
# descriptive
coronary %>% select(-id, -cad, -race, -gender) %>% describe()  # numerical
coronary %>% select(race, gender) %>% desc_cat()  # categorical
# or just use
# coronary %>% select(race, gender) %>% tbl_summary()
# plots
coronary %>% select(-id, -cad) %>% ggpairs()
# coronary %>% select(-id, -cad) %>% plot()  # or using built-in graphics
## fit univariable / slr ----
# can do univariable one-by-one on your own
slr_chol0 = glm(chol ~ 1, data = coronary)
summary(slr_chol0)
add1(slr_chol0, scope = ~ sbp + dbp + age + bmi + race + gender, test = "LRT")
# all sig. except gender
# may choose only vars p-value < 0.25 to proceed in MLR / expert judgement
## fit multivariable / mlr----
# modeling considerations:
# - select either sbp / dbp! redundant based on plot before, highly correlated
# - gender not sig., may exclude
# - for exercise reason, exclude age
mlr_chol = glm(chol ~ dbp + bmi + race, data = coronary)
summary(mlr_chol)
rsq(mlr_chol, adj = T)
# stepwise
# important to know stepwise/automatic selection is meant for exploratory analysis
# for confirmatory analysis, expert opinion in variable selection is preferable
# both
mlr_chol_stepboth = step(mlr_chol, direction = "both")
summary(mlr_chol_stepboth)
# forward
mlr_chol_stepforward = step(slr_chol0, scope = ~ dbp + bmi + race,
direction = "forward")
summary(mlr_chol_stepforward)  # same with both
# backward
mlr_chol_stepback = step(mlr_chol, direction = "backward")
summary(mlr_chol_stepback)  # same with both
# select: chol ~ dbp + age
mlr_chol_sel = glm(chol ~ dbp + race, data = coronary)
summary(mlr_chol_sel)
tidy(mlr_chol_sel, conf.int = TRUE)
tbl_regression(mlr_chol_sel)
rsq(mlr_chol_sel)
# Multicollinearity, MC
# by Variance Inflation Factor (VIF)
vif(mlr_chol_sel)  # all < 10
# Interaction, *
summary(glm(chol ~ dbp * race, data = coronary))  # dbp * race not sig.
# in R, it is easy to fit interaction by *
# dbp * race will automatically include all vars involved i.e. equal to
# glm(chol ~ dbp + race + dbp:race, data = coronary)
# use : to just include interaction
# model fit: residuals
rraw_chol = resid(mlr_chol_sel)  # unstandardized
hist(rraw_chol)
boxplot(rraw_chol)  # normally distributed
rstd_chol = rstandard(mlr_chol_sel)  # standardized residuals
pstd_chol = scale(predict(mlr_chol_sel))  # standardized predicted values
plot(rstd_chol ~ pstd_chol, xlab = "Std predicted", ylab = "Std residuals")
abline(0, 0)  # normal, linear, equal variance
plot(rraw_chol ~ coronary$dbp, xlab = "DBP", ylab = "Raw Residuals")
abline(0, 0)
plot(rraw_chol ~ coronary$age, xlab = "AGE", ylab = "Raw Residuals")
abline(0, 0)
# rename the selected model
mlr_chol_final = mlr_chol_sel
# Present the results and interpret ====
tib_mlr = tidy(mlr_chol_final, conf.int = TRUE)
rsq(mlr_chol_final, adj = T)
# use kable to come up with nice table
knitr::kable(tib_mlr, format = "simple")
tbl_regression(mlr_chol_final)
# Prediction ====
coronary$cad_prob = predict(mlg_cad_final, type = "response")  # in probability
# remember can also use mlg_cad_final$fitted.values
# converted from logit, by adding type = "response"
head(coronary$cad_prob)
## one subject ----
# dbp = 110, gender = man
predict(mlg_cad_final, list(dbp = 110, gender = "man"), type = "response")
library(LogisticDx)
install.packages("LogisticDx")
library(LogisticDx)
# 3. Receiver Operating Characteristic (ROC) curve
roc_cad = epiDisplay::lroc(mlg_cad_sel)
roc_cad$auc
epiDisplay::lroc(mlg_cad_sel)
# export it to a csv file for use later
write.csv(tib_mlg, "mlg_final.csv")
## many subjects ----
# more data points
new_data = data.frame(dbp = c(100, 110, 120, 100, 110, 120),
gender = c("man", "man", "man", "woman", "woman", "woman"))
new_data
predict(mlg_cad_final, new_data, type = "response")
new_data$prob_cad = predict(mlg_cad_final, new_data, type = "response")
new_data
new_data$pred_cad = cut(new_data$prob_cad, breaks = c(-Inf, 0.5, Inf),
labels = c("no cad", "cad"))
# alternative to ifelse
new_data
# export it to a csv file for use later
write.csv(tib_mlg, "mlg_final.csv")
setwd("~/Documents/Office/Lectures/Others/R Workshop PPSP/GLM/script")
# export it to a csv file for use later
write.csv(tib_mlg, "mlg_final.csv")
?vif
